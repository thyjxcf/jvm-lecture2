package com.shengsiyuan.jvm.memory;

/**
 * 虚拟机栈：Stack Frame 栈帧 存储操作数栈里面的数据，存储局部变量表
 * 每个方法执行的时候都会形成栈帧这个数据结构
 *
 * 程序计数器：（program counter)：记录执行那行字节码
 * 本地方法栈：主要用于执行本地方法 。native方法，不是由java实现，具体实现是由c或c++实现
 * （对于oracle的java虚拟机hotspot来说是将虚拟机栈和本地方法栈合二为一了）
 *
 * 堆（heap 占据最大内存):（虚拟机创建的时候，内存就会申请下来，用来存放对象实例）JVM管理的最大一部分内存空间
 * 我们都是通过refrence来操作对象。
 * 对象在堆上面，而引用本身在虚拟机栈上面。位于局部变量表中的一个对象
 *
 * 对象有2种组成，一种是数据本身，一种是元数据metadata就是class对象
 * 元数据位于方法区methodArea 存储的是对象本身的类型数据
 *
 * ref指向的是一个指针pointer。
 * 里面会有2个指针 一个指向真正实例数据，一个指向方法区内的特定类型信息。
 * 第二种情况是 ，本身包含实例，还有一个指针指向方法区类型信息，
 * hotspot采用的是第二种方式
 * 堆空间是 大量对象会被回收掉 发生垃圾回收很高
 * 压缩，回收形成更大内存空间，方便对象使用
 * 方法区是极少发送垃圾回收概率的
 *
 * 方法区：（method area）：存储元信息 永久代（permanent generation) ，从jdk1.8开始彻底废弃永久代改使用元空间
 * 运行时常量池：方法区的一部分
 * 直接内存：direct memory
 */
public class MyTest1 {
}
